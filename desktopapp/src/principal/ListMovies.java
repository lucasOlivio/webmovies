/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import java.awt.Color;
import java.awt.Component;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author lucas
 */
public class ListMovies extends javax.swing.JFrame {

    /**
     * Creates new form listMovies
     */
    private User user;
    DefaultListModel listModel = new DefaultListModel(); 
    public ListMovies(Object id) {
        this.user = new User(id);
        initComponents();
        this.jList1.setCellRenderer( new GreenRedCellRenderer() );
        updateList();
    }
    
    private void updateList(){
        this.listModel.clear();
        
        List<Filme> filmes = this.user.getFilmes();
        
        filmes.forEach((filme) -> {
           this.listModel.addElement(filme);
           
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>(listModel);
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("WEBMOVIES");
        jLabel2.setFocusable(false);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jTextField1.setText("Nome do filme");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jButton2.setBackground(new java.awt.Color(228, 35, 35));
        jButton2.setText("Deletar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Visto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Login login = new Login();
        login.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String filme = jTextField1.getText();
       
       if(filme == ""){
           JOptionPane.showMessageDialog(this, "Informe o nome do filme!", "ERRO", JOptionPane.ERROR_MESSAGE);
       }else{
           HttpConn request = new HttpConn();
           try {
                Map<String, Object> response = request.sendPost("http://localhost:2000/addfilme","usuario="+this.user.getId()+"&filme="+filme);

                Object value = response.get("status");
                if (value.equals("inserido")) {
                    this.user.loadFilmes();
                    updateList();
                } else {
                    JOptionPane.showMessageDialog(this, "Filme duplicado", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "Erro na requisição, feche o programa e tente novamente.", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Filme filme = jList1.getSelectedValue();

        if(filme.filme == ""){
            JOptionPane.showMessageDialog(this, "Selecione um filme!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }else{
            HttpConn request = new HttpConn();
            try {
                Map<String, Object> response = request.sendPut("http://localhost:2000/checkfilme","usuario="+this.user.getId()+"&filme="+filme.filme+"&visto="+!filme.isVisto());

                Object value = response.get("status");
                if (value.equals("atualizado")) {
                    this.user.loadFilmes();
                    updateList();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao marcar o filme! Tente novamente em instantes.", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "Erro na requisição, feche o programa e tente novamente.", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Filme filme = jList1.getSelectedValue();

        if(filme.filme == ""){
            JOptionPane.showMessageDialog(this, "Selecione um filme!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }else{
            HttpConn request = new HttpConn();
            try {
                Map<String, Object> response = request.sendDelete("http://localhost:2000/removefilme","usuario="+this.user.getId()+"&filme="+filme.filme);

                Object value = response.get("status");
                if (value.equals("removido")) {
                    this.user.loadFilmes();
                    updateList();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao deletar o filme! Tente novamente em instantes.", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex);
                JOptionPane.showMessageDialog(this, "Erro na requisição, feche o programa e tente novamente.", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private static class GreenRedCellRenderer extends DefaultListCellRenderer {
        public Component getListCellRendererComponent( JList list, Object value, int index, boolean isSelected, boolean cellHasFocus ) {
            Component c = super.getListCellRendererComponent( list, value, index, isSelected, cellHasFocus );
            
            if (value instanceof Filme) {
                Filme filme = (Filme)value;
                setText(filme.getFilme());
                setToolTipText(filme.getFilme());
                
                if ( filme.isVisto() ) {
                    System.setProperty("myColor", "0X67FE55");
                }
                else {
                    System.setProperty("myColor", "0XFD3737");
                }
                c.setBackground( Color.getColor("myColor") );
            }
            
            return c;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<Filme> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
